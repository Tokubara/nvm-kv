alias out_nvm="rsync_all -m u -f ./engine_race -t nvm-kv"
# alias in="rsync_all -m u -r -f kv -t ../nvm-kv"
alias out="rsync_all -m u -f ../kv"
alias in="rsync_all -m u -r -f kv -t ../kv"

mac:
out
ubuntu/kv下(之后也是如此)
make clean
make
cd test
./single_thread_test
cd ..

结果: 可以过single_thread_test

恢复Makefile, 使得make非dbg的选项, 与dbg的选项不一样. OPT不一样. 但是-I还是保留(也就是说, 还是保留log功能), 只是编译选项不一样, 包括有NDEBUG
mac:
out
ubuntu:
make clean
make
cd test
./single_thread_test # 结果: 卡住了
cd ..
如果恢复编译选项

目的: 怀疑是NDEBUG的问题
修改Makefile, 注释NDEBUG, 也就是不使用NDEBUG选项
mac:
out
ubuntu:
make clean
make
cd test
./single_thread_test # 没有卡住, 顺利执行
cd ..
结论: 的确是NDEBUG的问题

推理: 在kv下, NDEBUG绝对没有任何作用, 除了注释, 它只出现在Makefile中
但有一个外来源可能导致错误, mylib.h
在这个目录下, 搜索NDEBUG, 有2个地方用到了:
#define Assert(cond, ...) (void(0))

以及
#ifdef NDEBUG

#define debug(...) ((void)0)
#define idebug(...) ((void)0)
#define debug_raw(...) ((void)0)
#define idebug_raw(...) ((void)0)

但是不可能是debug函数, 因为我都没用过.
但是Assert看上去无辜极了, 会是Assert?
不敢相信

目的: 仍然保持添加NDEBUG, 对single_thread_test测例添加更多的打印信息, 粗定位, 顺便修改了build.sh, 只生成single_thread_test
mac:
out
ubuntu:
make clean
make
cd test
./single_thread_test # 没有卡住, 顺利执行
cd ..

结果
18:24:56 TRACE /home/parallels/kv/engine_race/engine_race.cc:25: Open /tmp/ramdisk/data/te
st-331516453017026, bucket number: 8
open engine_path: /tmp/ramdisk/data/test-331516453017026
18:24:57 TRACE single_thread_test.cc:48: Write once finish

也就是说, 在执行Read的时候卡住了(key存在的情况下, 之前有一次key并不存在)

目的: 对Read添加更多的打印信息
不过在我编辑的过程中(其实就是发现Read调用了get_string_from_location, 而get_string_from_location调用了Assert). 我意识到了问题. 那就是, Assert是有副作用的, 比如Assert(fstat(key_fd, &st)==0, "%d", key_fd);
再比如Assert(FileAppend...)
因此一个非常重要的原则: 如果你打算置空某个操作(define (void)0), 你得保证这个操作本来就对代码毫无影响. Assert破坏了这个原则. 对于打印调试信息, 不要有副作用. 分离逻辑和打印内容.

修改了Assert, 保证Assert不干实际的事. 不过写法上不好看, 比如, 一个函数内, 有多处Assert, 并且返回类型不一样, rust可以覆盖变量, 但是这里只能起新的变量.
mac:
out
ubuntu:
make clean
make
cd test
./single_thread_test # 没有卡住, 顺利执行
cd ..
鉴于没有问题, 因此去除了single中的log信息

现在需要试试看nvm是不是可以了, 但在此之前, 我们还需要一件事, 那就是重新加上条件编译
mac:
out
ubuntu:
make clean
make
cd test
./single_thread_test # 没有卡住, 顺利执行
cd ..

现在看nvm是不是可以了
mac:
alias out_nvm="rsync_all -m u -f ./engine_race -t nvm-kv"
out_nvm
ubuntu(~/nvm-kv):
make
cd test
bash build.sh
./single_thread_test # 通过
./multi_thread_test # 通过
./crash_test # 通过

查看bench的运行方法
ubuntu(nvm根目录下, 之后也如此):
vim bench/build.sh # std从c++11改为c++17
有一个问题是, bench也需要改一下, 事实上, 本来的bench是没有的, 这是MP添加的, 可以做成表格

首先, 应该用的是build.sh, 而不是build-real-nvm.sh, 后者没有-DMOCK选项
    printf("%d thread, %llu operations per thread, time: %lfus\n", threadNR,
           OP_PER_THREAD, us);
    printf("throughput %lf operations/s\n",
           1ull * (threadNR * OP_PER_THREAD) * 1000000 / us);
问题是, 表格有哪些变量?
Read, Skew, 线程数
我打算修改bench.cc, 输出简单, 不需要正则表达式的提取, 然后用R来制表
但问题是, 我在改谁? 我在改mac的nvm-kv, 但其它部分, 两者应该不一样, 也就是说, 只传bench目录
mac:
rsync_all -m u -f ./bench -t nvm-kv
ubuntu(nvm-kv):
cd bench
bash build.sh
./bench 2 90 0
打印出了大量随机字符串, 就像这样
xLCrFVMSg222X7qObmRNbzFIUVinQAlPWsENSrg7DfOiuEvFFg3Xw9PltNSEvNDifXhJP9XNRI7XY2nuHmJE6Kw3rC
vAI7ks6bmcvCDLHV7JNKN9eCjCAvog3HDPMPBWYyb7m0QqSegmentation fault (core dumped)
而且重复打印, 生成的字符串并不一样, 可见这是个随机字符串
第一个问题, 到底是我的lib的问题, 还是bench的问题. 
我的看法是, 可以编译一下tth的, 看看会不会有类似的现象, 但要小心位置.
可不可以在子目录下面直接make, 生成的又在哪里?

如果是子目录直接make:
ubuntu engine_tth$ make -n
INCLUDE_PATH=-I./ -I .. -I $MHOME/Playground/lib/ubuntu/header -I/home/parallels/kv/engine
_tth
CURDIR=/home/parallels/kv/engine_tth
rm -f /home/parallels/kv/engine_tth/lib/libengine.a
ar rv /home/parallels/kv/engine_tth/lib/libengine.a /home/parallels/kv/engine_tth/engine_r
ace.o
这里有一件奇怪的事,为什么用make -n, 还会包括header?
因为我写错了, 改了Makefile

一件不得不说的事, 同步, 我的同步有很大的问题, 干脆也别每次out了, 我们强行规定: 如果要有什么运行. 
有两个目录也是个困扰.

因此, 我再也受不了需要同步和两个目录的问题了.
我们首先合并:nvm-kv与kv, 提交也只是提交kv, 免受两个目录的折磨

我们检验的方式是:
下载全新的nvm包, 把engine_race移过去, 也可以过所有的测试. 以及运行bench.
做到这一点事实上不需要改代码吧.
按理说测试本来就是你可以随便测的. 除非你要额外改测例. 但你其实不用是不是.
所以搞不懂你为啥要合并, 本来就可以做到的事. 你从来就不需要nvm. 除非你代码有问题.

好, 那先看看代码有没有问题
mac:
cp -r $MHOME/Playground/tmp/kv/engine_race/ $MHOME/Downloads/nvm-kv/
cd $MHOME/Downloads/nvm-kv
make
cd test
bash build.sh
./single_thread_test
./multi_thread_test
./crash_test

在根目录下(都是指kv)
make
cd bench
bash build.sh
./bench 1 80 0 #输出一大堆随机字符串
./bench 1 80 0 &> run_error_log.txt # 竟然没有重定向, 还是生成大一堆随机字符串

添加了trace信息
bash build.sh
rm *log.txt
./bench 1 80 0 &> run_error_log.txt # 竟然没有重定向, 还是生成大一堆随机字符串
17:56:19 ESC[94mTRACEESC[0m ESC[90mbench.cc:83:ESC[0m open engine_path: /tmp/ramdisk/data/
test-462726333966298

17:56:20 ESC[94mTRACEESC[0m ESC[90mbench.cc:87:ESC[0m open finish
17:56:20 ESC[94mTRACEESC[0m ESC[90mbench.cc:94:ESC[0m before Write
因此确定, 第一次write就失败了

获得有debug信息的libengine.a
rm -rf lib
make dbg
cd bench
bash build.sh
rm *log.txt
./bench 1 80 0 &> run_error_log.txt # 竟然没有重定向, 还是生成大一堆随机字符串

gdb ./bench
start 1 80 0
tbr 95
c
s # 进入了PolarString
s # 退出了

重复了上面的过程, 发现
(gdb) s
polar_race::PolarString::PolarString (this=0x7fffffffc660,
    s=0x7fffffffc8d0 "Vhn9ZaO8YaH635H6d7vTdYF2htooLkvOKxxeicTuCSWzsC7z79TFCAkcznik9n50wnSU
9AKiklilmMYNN024SHXLaELSScNXJlNYMjfNGpXPvfp9zW3ZfYZhKi9Ki5mXrYjqjG7Xitg1nEfBC7lQYGDB1Ia4Hz
MiVLlIOHnYhCtgc7rt7iWHlYpGwvc5Uh88disIeEKc"...) at ../include/polar_string.h:19
19        PolarString(const char* s) : data_(s), size_(strlen(s)) { }

frame 1
p k # 就是想看看那个字符串长什么样子. 得到$1 = {data_ = 0x7fffffffc640 "", size_ = 8}
我知道问题在哪里了. 因为
#define which_bucket(ch) ((ch<='9'?ch-'0':(ch<='Z'?ch-'A'+10: (ch-'a'+36)))/num_per_bucket)
根本没有处理, 而且它是宏, 不是函数, 察觉都无从察觉

修改了engine_race.cc
rm -rf lib
make dbg
cd bench
bash build.sh
rm *log.txt
./bench 1 80 0 &> run_error_log.txt
的确没输出一大堆字符串了, 但还是有段错误


rm -rf lib
make dbg
cd bench
bash build.sh
rm *log.txt
./bench 1 80 0 &> run_error_log.txt

用gdb调一下
gdb ./bench
start 1 80 0
c

(gdb) p f.key_mmap_cur
$1 = (polar_race::u8 *) 0x0
是0, 这是为何?

添加assert, 发现的确有f.key_mmap_cur==0的情况
在添加assert的时候, 我不禁怀疑, 其实是mmap失败了, 其实是内存太小了
rm -rf lib
make dbg
cd bench
bash build.sh
rm *log.txt
./bench 1 80 0 &> run_error_log.txt

bench: /media/psf/Home/Playground/tmp/kv/engine_race/engine_race.cc:132: static polar_race
::RetCode polar_race::EngineRace::Open(const string&, polar_race::Engine**): Assertion `(u
64)f.key_mmap_cur!=0' failed``.

报出了新错
ESC[1;31mfd=14,loc_offset=4096512, loc_len=16ESC[0m
bench: /media/psf/Home/Playground/tmp/kv/engine_race/engine_race.cc:243: int polar_race::E
ngineRace::get_string_from_location(polar_race::i32, polar_race::Location*, std::__cxx11::
string*): Assertion `r!=0' failed.


开个小差, 想看看还能过测例么?
cd test
./single_thread_test
./multi_thread_test
cd ..
能

改了改那个报错的信息, 想看看read返回为0到底是不是因为参数为0
rm -rf lib
make dbg
cd bench
bash build.sh
rm *log.txt
./bench 1 80 0 &> run_error_log.txt
ce.cc:247:ESC[0m fd=10,loc_offset=4096224, value_len=16, st.st_size: 4096000
bench: /media/psf/Home/Playground/tmp/kv/engine_race/engine_race.cc:248: int polar_race::E
ngineRace::get_string_from_location(polar_race::i32, polar_race::Location*, std::__cxx11::
string*): Assertion `false' failed.
所以这完全已经超过文件的大小了, 可是为什么会超过
又重复运行了好多次, fd和loc_offset都是略大于4096224, 不过st_size很稳定地是4096000

